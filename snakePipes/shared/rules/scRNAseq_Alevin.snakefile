### cut columns 1 and 3 from t2g tsv #########

rule cut_t2g:
        input:
            "Annotation/genes.filtered.t2g"
        output:
            "Annotation/genes.filtered.slim.t2g"
        threads: 1
        shell:"""
            cut -f1,3 {input[0]} > {output[0]}
            """

rule SalmonAlevin:
        input:
            R2 = "originalFASTQ/{sample}"+reads[0]+".fastq.gz",
            R1 = "originalFASTQ/{sample}"+reads[1]+".fastq.gz",
            bin = "Salmon/SalmonIndex/seq.bin"
        params:
            protocol = "--" + prepProtocol,
            whitelist = "--whitelist {}".format(BCwhiteList) if BCwhiteList else "",
            expectcells = "--expectcells {}".format(expectCells) if expectCells else "",
            tgMap = "Annotation/genes.filtered.slim.t2g",
            libtype = alevinLibraryType,
            outdir = "Alevin/{sample}"
        output:
            quantmat = "Alevin/{sample}/alevin/quants_mat.gz",
        log: 
            out =  "Alevin/logs/alevin.{sample}.out",
            err = "Alevin/logs/alevin.{sample}.err"
        #Use RNAseq env because Salmon already installed there (no need for duplication).
        conda: CONDA_RNASEQ_ENV
        threads: 8
        shell:"""
            salmon alevin -l {params.libtype} -1 {input.R1} -2 {input.R2} {params.protocol} -i Salmon/SalmonIndex -p {threads} -o {params.outdir} --tgMap {params.tgMap} --dumpFeatures --dumpMtx --numCellBootstraps 100 > {log.out} 2> {log.err}
            """

rule AlevinQC:
        input:
            indum = "Alevin/{sample}/alevin/quants_mat.gz"
        output:
            outfiles = "multiQC/Alevin_{sample}.html"
        params:
            indir = "Alevin/{sample}/",
            outdir =  "multiQC/",
            samid = "{sample}",
            outfile = "Alevin_{sample}.html"
        conda: CONDA_alevinqc_ENV
        script: "../rscripts/scRNAseq_Alevinqc.R"


rule get_intron_fa:
    input:
        gtf = "Annotation/genes.filtered.gtf",
        fasta = genome_fasta
    output:
        intron_fasta = temp("Annotation/introns.filtered.fa")
    conda: CONDA_eisaR_ENV
    script: "../rscripts/scRNAseq_eisaR.R"


rule get_joint_fa:
    input:
        exon_fasta = "Annotation/genes.filtered.fa",
        intron_fasta = "Annotation/introns.filtered.fa"
    output:
        joint_fasta = "Annotation/exon.intron.filtered.fa"
    shell:
        """
        cat {input.exon_fasta} {input.intron_fasta} > {joint_fasta}
        """

#uses decoys generated by rule SalmonIndex in Salmon.snakefile

rule Salmon_index_joint_fa:
    input:
        joint_fasta = "Annotation/exon.intron.filtered.fa",
        decoys = "Salmon/SalmonIndex/decoys.txt",
        genome_fasta = genome_fasta
    output:
        seq_fa = temp("Salmon/SalmonIndex_RNAVelocity/seq.fa")
        salmon_index = "Salmon/SalmonIndex_RNAVelocity/seq.bin"
    log:
        err = "Salmon/SalmonIndex_RNAVelocity/logs/SalmonIndex.err"
        out = "Salmon/SalmonIndex_RNAVelocity/logs/SalmonIndex.out"
    threads: 8
    conda: CONDA_RNASEQ_ENV
    shell:"""
        cat {input.joint_fasta} {input.genome_fasta} > {output.seq_fa}
        salmon index -p {threads} -t {output.seq_fa} -d {input.decoys} -i Salmon/SalmonIndex_RNAVelocity {params.salmonIndexOptions} > {log.out} 2> {log.err}
        """

rule t2g_introns:
    input:
        joint_fasta = "Annotation/exon.intron.filtered.fa"
    output:
        t2g = "Annotation/exon.intron.filtered.t2g"
    shell: """
        """

rule AlevinForVelocity:
        input:
            R2 = "originalFASTQ/{sample}"+reads[0]+".fastq.gz",
            R1 = "originalFASTQ/{sample}"+reads[1]+".fastq.gz",
            bin = "Salmon/SalmonIndex_RNAVelocity/seq.bin"
        params:
            protocol = "--" + prepProtocol,
            whitelist = "--whitelist {}".format(BCwhiteList) if BCwhiteList else "",
            expectcells = "--expectcells {}".format(expectCells) if expectCells else "",
            tgMap = "Annotation/exon.intron.filtered.t2g",
            libtype = alevinLibraryType,
            outdir = "AlevinForVelocity/{sample}"
        output:
            quantmat = "AlevinForVelocity/{sample}/alevin/quants_mat.gz"
        log: 
            out =  "AlevinForVelocity/logs/alevin.{sample}.out",
            err = "AlevinForVelocity/logs/alevin.{sample}.err"
        #Use RNAseq env because Salmon already installed there (no need for duplication).
        conda: CONDA_RNASEQ_ENV
        threads: 8
        shell:"""
            salmon alevin -l {params.libtype} -1 {input.R1} -2 {input.R2} {params.protocol} -i Salmon/SalmonIndex_RNAVelocity -p {threads} -o {params.outdir} --tgMap {params.tgMap} --dumpFeatures --dumpMtx --numCellBootstraps 100 > {log.out} 2> {log.err}
            """

rule split_matrices:
    input:
        quantmat = "AlevinForVelocity/{sample}/alevin/quants_mat.gz"
    output:
        spliced = ""
        unspliced = ""
    script: "../rscripts/scRNAseq_splitAlevinVelocityMatrices.R"


